<!DOCTYPE html>
<html>
   <head>
      <title><?php echo $title;?> - Página Inicial</title>
      <meta charset="UTF-8">
      <meta name="title" content="<?php echo $title;?>">
      <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
   	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
   	<meta name="msapplication-tap-highlight" content="no"/>
      <link rel="stylesheet" href="<?php echo $site_url;?>/themes/<?php echo $theme;?>/css/screen.css">
      <link rel="stylesheet" href="<?php echo $site_url;?>/themes/<?php echo $theme;?>/css/style.css"> 
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
      <script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>
      <link href="https://fonts.googleapis.com/css?family=Ubuntu" rel="stylesheet">
      <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js"></script>
      <script type="text/javascript" src="<?php echo $site_url;?>/themes/<?php echo $theme;?>/js/tipped.js"></script>
      <script type="text/javascript" src="<?php echo $site_url;?>/themes/<?php echo $theme;?>/js/pace.min.js"></script>
      <link rel="stylesheet" type="text/css" href="<?php echo $site_url;?>/themes/<?php echo $theme;?>/css/tipped.css" />
</head>
<body class="dashboard" onselectstart="return false" oncontextmenu="return false" ondragstart="return false" onMouseOver="window.status='..message perso .. '; return true;" style="overflow: hidden;">

<script type='text/javascript'>
$(document).ready(function() {
  Tipped.create('.boxes .box');
});
</script>

<div id="app">
<div class="container">
<div class="scroll" data-id="hori">
<?php
   //require("tuturial/index.phtml");
   require("hello/index.phtml");
   require("me/index.phtml");
   require("feed/index.phtml");
   require("groups/index.phtml");
?>

<div class="newServer" v-if="newServer">
   <div class="modal">
      <h1>Criar novo server</h1>
      <input v-model="serverName" type="text" placeholder="Nome do server">
      <button @click="novoServer">Criar</button>
      <button @click="newServer = false">Cancelar</button>
   </div>
</div>

<div class="newServer" v-if="options">
   <div class="modal full">
      <h1>Configurações do server {{ selectServer.name }}</h1>
      <br>
      <div class="admin" v-if="myId === selectServer.owner">
      <p style="position: relative; float: left; left: 30px; font-size: 18px; top: 10px;">Editar nome</p>
      <input type="text" :value="selectServer.name">
      <button v-if="selectServer.id !== 1" @click="deleteServer" style="background: rgb(183, 47, 47); width: auto; padding: 10px; border-radius: 50%; outline: none;"><i class="far fa-trash-alt"></i> </button>
      </div>
      <span style="
      float: right;
      position: absolute;
      top: 5px;
      right: 10px;
      font-size: 32px;
      cursor: pointer;
      " @click="options = false"><i class="fas fa-times"></i></span>
   </div>
</div>

</div>
</div>
</div>

<link rel="stylesheet" href="<?php echo $site_url;?>/themes/<?php echo $theme;?>/css/dashboard.css">


<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<script src="/themes/default/js/dashboard.js?version=1" type="text/javascript"></script>
<script src="/themes/default/js/navegar.js?version=1" type="text/javascript"></script>


<script>
var myId = "<?php echo $_COOKIE['iduser']?>";

const app = new Vue({
 el: "#app",
 data:{
   myId: myId,
   servers: [],
   selectServer: {"id" : 1, "name": "Global", "owner": "3"},
   mensagem: [],
   msg: "",
   users: [],
   newServer: false,
   serverName: "",
   onde: "perfil",
   options: false,
   mencionar: false,
   selectUserA: null,
   estouMencionando: false,
   myProfile: {"nome": null, "avatar": null},
   estranhoProfile: {},
   vendoEstrando: false,
   error: null,
   errorNu: {"titulo" : null},
   search: false,
   searchTerm: "",
   notificationWhere: 0,
   notifications: [
      {"count": 0},
      {"count": 0}
   ],
   newsBa: [],
   friends: [],
   msgPrivada: false,
   msgPrivadaUser: {},
   mensagemPrivada: [],
   ocupado: true,
   msgPrivadaT: ""
 },
 methods:{
   serverSelect(server  ){
      this.selectServer = server
      this.onde = 'feed';
      this.ocupado = false
   },
   showMensagem(){
      if(!this.ocupado){
      if(!this.msgPrivada){
         axios
      .get('/api/receive?id=' + this.selectServer.id)
      .then(response => (this.mensagem = response.data))
      } else{
      axios
      .get('/api/receive?iduser=' + this.msgPrivadaUser.id)
      .then(response => (this.mensagemPrivada = response.data))
      }
      }
   },
   sendMsg(){
      if(this.msg == "" || this.msg == null){
         return
      }
      else{
      if(!this.estouMencionando){
         axios
      .post('/api/send?server=' + this.selectServer.id + "&mensagem=" + this.msg)
      .then(response => (
         this.error = response.data
      ))
      } else{
         this.msg = this.msg.replace(this.selectUserA.nome, "")
         axios
      .post('/api/send?server=' + this.selectServer.id + "&mensagem=" + this.msg + "&mencionando=" + this.selectUserA.id)
      .then(response => (this.mensagem = response.data))
      }
      this.msg = ""
      this.verificarError()
      }
   },
   verificarError(){
      setTimeout(() => {
      if(this.error == "sucessnot_perm"){
         this.errorNu = {"titulo": "Você não tem permissão para isso"}
      } else if(this.error == "sucessnot_perm"){
         this.errorNu = {"titulo": "Você não tem permissão para isso"}
      }
      }, 400);
      setTimeout(() => {
         this.errorNu = {"titulo": null}
      }, 3000);
   },
   allUsers(){
      axios
      .get('/api/allUsers')
      .then(response => (this.users = response.data))
   },
   showNoti(){
      axios
      .get('/api/news')
      .then(response => (this.newsBa = response.data))
   },
   addFriend(quem){
      axios
      .post('/api/addFriend?quem='+ quem)
      .then(response => (console.log(response.data)))
   },
   aceitarAmigo(quem){
      axios
      .post('/api/acceptAmigo?quem='+ quem)
      .then(response => (console.log(response.data)))
   },
   validarNoti(){
      var count1 = 0;
      this.friends = []
      for(var i = 0; i < this.newsBa.length; i++){
         if(this.newsBa[i].id_quem == app.myProfile.id && this.newsBa[i].ativo == 1 && this.newsBa[i].aceito == 0){
            count1++;
         } 
         if(this.newsBa[i].tipo == 1){
            var quem = this.newsBa[i]
            this.friends.push(quem)
         }
      }
      this.notifications[0].count = count1;
   },
   novoServer(){
      if(this.serverName == "" || this.serverName == null){
         return
      } else{
      axios
      .post('/api/newServer?name=' + this.serverName)
      .then(response => (this.showServer()))
      this.serverName = ""
      this.newServer = false
      }
   },
   showServer(){
      axios
      .get('/api/list_servern')
      .then(response => (this.servers = response.data))
      },
   navegarTabs(onder){
      this.onde = onder;
      $(".tabs").css("display", "none");
      $(".tabs").css("padding", "0px");
		$(".fixed .links_rapido").css("color", "var(--white2)");
		$( ".fixed .links_rapido" ).removeClass( "active" );
		$(".tabs").css("left", "0px");
		if(this.onde == "perfil"){
         $("#me").css("display", "block");
			$(".tabs").css("width", "0%");
			$("#me").css("width", "98%");
		} else if(this.onde == "feed"){
         $("#feed").css("display", "block");
			$(".tabs").css("width", "0%");
			$("#feed").css("width", "98%");
		} else if(this.onde == "grupos"){
         $(".grupos").css("display", "block");
			$(".tabs").css("width", "0%");
			$(".grupos").css("width", "98%");
		}
		$(this).css("color", "#fff");
		$(this).addClass( "active" );
   },
   deleteServer(){
      axios
      .get('/api/deleteServer?server=' + this.selectServer.id)
      .then(response => (console.log(response.data)))
      this.options = 0
      this.selectServer = this.servers[0]
   },
   myProfileGet(){
      axios
      .get('/api/user')
      .then(response => (this.myProfile = response.data))
   },
   detectMessage(){
      for(var i = 0; i < this.users.length; i++){
         if(this.msg.includes(this.users[i].nome)){
            this.estouMencionando = true
            return
         } else{
            this.estouMencionando = false
         }
      }
      if(this.msg.includes("@")){
         this.mencionar = true
      } else{
         this.mencionar = false
      }
   },
   selectUser(user){ 
     
      this.selectUserA = user
      this.msg = this.msg.replace('@', '')
      this.msg = this.msg.replace(this.msg, '')
      this.msg += user.nome
      this.mencionar = false
      for(var i = 0; i < this.users.length; i++){
         if(this.msg.includes(this.users[i].nome)){
            this.estouMencionando = true
            return
         } else{
            this.estouMencionando = false
         }
      }
   },
   verEstranho(user){
      this.search = false
      this.searchTerm = ""
      if(user.id !== myId){
      this.estranhoProfile = user
      this.vendoEstrando = true
      }
   },
   chatComUser(user){
      this.msgPrivada = true
      this.msgPrivadaUser = user
      this.ocupado = false
   },
   sendMsgPrivada(){
      if(this.msgPrivadaT == "" || this.msgPrivadaT == null){
         return
      }
      else{
         axios
      .post('/api/msgPrivada?id=' + this.msgPrivadaUser.id + "&mensagem=" + this.msgPrivadaT)
      .then(response => (
         this.error = response.data
      ))
      this.msgPrivadaT = ""
   }
   }
 },
 mounted () {
    this.myProfileGet();
    this.showServer();
    this.allUsers();
         setInterval(() => {  
            this.showMensagem();
            this.showNoti();
            this.validarNoti();
         }, 2000);
         setInterval(() => {  
            this.myProfileGet(); 
            this.showServer();
            this.allUsers();
         }, 5000);
   }
})
</script>

</body>